---
// Enhanced Globe component with drag/momentum physics
---

<div class="globe-container" role="img" aria-label="Interactive 3D globe showing Atlas Divisions global presence">
  <div id="globe-canvas" aria-live="polite" aria-describedby="globe-description">
    <div class="globe-loading" id="globe-loading" aria-label="Loading interactive globe">
      <div class="loading-spinner" aria-hidden="true"></div>
      <p>Loading Atlas Globe...</p>
    </div>
    <div id="globe-description" class="sr-only">
      An interactive 3D globe that can be rotated by clicking and dragging. The globe shows world continents and represents Atlas Divisions' global reach.
    </div>
  </div>
</div>

<script>
  // Dynamic import with loading state and error handling
  let THREE = null;

  class AtlasGlobe {
    constructor() {
      this.scene = null;
      this.camera = null;
      this.renderer = null;
      this.globeMesh = null;
      
      // Enhanced interaction properties
      this.isDragging = false;
      this.previousMousePosition = { x: 0, y: 0 };
      this.rotationVelocity = { x: 0, y: 0 };
      this.autoRotationSpeed = 0.005;
      this.friction = 0.95;
      this.rotationSpeed = 0.008;
      
      this.atlasColors = {
        ocean: '#001122',
        land: '#d4af37',
        stroke: '#cd7f32',
        atmosphere: 0xd4af37,
        light: 0xd4af37
      };
      
      this.init();
    }
    
    async init() {
      if (!THREE) {
        console.error('Three.js not loaded');
        return;
      }
      
      try {
        await this.createScene();
        this.setupEventListeners();
        this.hideLoading();
      } catch (error) {
        console.error('Globe initialization failed:', error);
        this.showError();
      }
    }
    
    hideLoading() {
      const loadingElement = document.getElementById('globe-loading');
      if (loadingElement) {
        loadingElement.style.opacity = '0';
        setTimeout(() => {
          loadingElement.style.display = 'none';
        }, 300);
      }
    }
    
    showError() {
      const loadingElement = document.getElementById('globe-loading');
      if (loadingElement) {
        loadingElement.innerHTML = `
          <div class="globe-error">
            <div class="error-icon">üåç</div>
            <p>Globe unavailable</p>
          </div>
        `;
      }
    }
    
    createScene() {
      const container = document.getElementById('globe-canvas');
      if (!container) return;
      
      // Wait for container to be properly sized
      setTimeout(() => {
        const width = container.offsetWidth || container.clientWidth || 400;
        const height = container.offsetHeight || container.clientHeight || 400;
        
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        
        this.renderer.setSize(width, height);
        this.renderer.setClearColor(0x000000, 0);
        container.appendChild(this.renderer.domElement);
        
        this.camera.position.z = 4;
        
        this.createGlobe();
        this.setupLighting();
        this.animate();
      }, 100);
    }
    
    async createGlobe() {
      const geometry = new THREE.SphereGeometry(1.5, 64, 64);
      const texture = await this.createAtlasTexture();
      
      const material = new THREE.MeshPhongMaterial({
        map: texture,
        transparent: true,
        opacity: 0.9
      });
      
      this.globeMesh = new THREE.Mesh(geometry, material);
      this.globeMesh.rotation.x = 0.1; // Slight tilt
      this.scene.add(this.globeMesh);
      
      this.createAtmosphere();
      
      // Initialize with auto-rotation
      this.rotationVelocity.x = 0;
      this.rotationVelocity.y = this.autoRotationSpeed;
    }
    
    createAtmosphere() {
      const atmosphereGeometry = new THREE.SphereGeometry(1.6, 64, 64);
      const atmosphereMaterial = new THREE.MeshBasicMaterial({
        color: this.atlasColors.atmosphere,
        transparent: true,
        opacity: 0.1,
        side: THREE.BackSide
      });
      const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
      this.scene.add(atmosphere);
    }
    
    setupLighting() {
      const ambientLight = new THREE.AmbientLight(this.atlasColors.light, 0.4);
      this.scene.add(ambientLight);
      
      const directionalLight = new THREE.DirectionalLight(this.atlasColors.light, 0.8);
      directionalLight.position.set(5, 3, 5);
      this.scene.add(directionalLight);
    }
    
    async createAtlasTexture() {
      const canvas = document.createElement('canvas');
      canvas.width = 2048;
      canvas.height = 1024;
      const ctx = canvas.getContext('2d');
      
      ctx.fillStyle = this.atlasColors.ocean;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      try {
        const response = await fetch('https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson');
        const geoData = await response.json();
        this.drawWorldMap(ctx, geoData, canvas.width, canvas.height);
      } catch (error) {
        console.log('Using fallback map');
        this.drawFallbackMap(ctx, canvas.width, canvas.height);
      }
      
      const texture = new THREE.CanvasTexture(canvas);
      texture.wrapS = THREE.RepeatWrapping;
      texture.wrapT = THREE.ClampToEdgeWrapping;
      return texture;
    }
    
    drawWorldMap(ctx, geoData, width, height) {
      ctx.fillStyle = this.atlasColors.land;
      ctx.strokeStyle = this.atlasColors.stroke;
      ctx.lineWidth = 1;
      
      geoData.features.forEach(feature => {
        if (feature.geometry.type === 'Polygon') {
          this.drawPolygon(ctx, feature.geometry.coordinates, width, height);
        } else if (feature.geometry.type === 'MultiPolygon') {
          feature.geometry.coordinates.forEach(polygon => {
            this.drawPolygon(ctx, polygon, width, height);
          });
        }
      });
    }
    
    drawPolygon(ctx, coordinates, width, height) {
      coordinates.forEach(ring => {
        ctx.beginPath();
        ring.forEach((coord, index) => {
          const x = ((coord[0] + 180) / 360) * width;
          const y = ((90 - coord[1]) / 180) * height;
          
          if (index === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
        });
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
      });
    }
    
    drawFallbackMap(ctx, width, height) {
      const continents = [
        { x: 0.2, y: 0.3, w: 0.25, h: 0.4 }, // North America
        { x: 0.25, y: 0.5, w: 0.15, h: 0.35 }, // South America
        { x: 0.48, y: 0.25, w: 0.12, h: 0.15 }, // Europe
        { x: 0.5, y: 0.35, w: 0.15, h: 0.4 }, // Africa
        { x: 0.6, y: 0.2, w: 0.3, h: 0.35 }, // Asia
        { x: 0.75, y: 0.65, w: 0.12, h: 0.1 } // Australia
      ];
      
      ctx.fillStyle = this.atlasColors.land;
      continents.forEach(continent => {
        ctx.fillRect(
          continent.x * width,
          continent.y * height,
          continent.w * width,
          continent.h * height
        );
      });
    }
    
    setupEventListeners() {
      const container = document.getElementById('globe-canvas');
      if (!container) return;
      
      container.style.cursor = 'grab';
      
      // Mouse events
      container.addEventListener('mousedown', this.onMouseDown.bind(this));
      container.addEventListener('mousemove', this.onMouseMove.bind(this));
      container.addEventListener('mouseup', this.onMouseUp.bind(this));
      container.addEventListener('mouseleave', this.onMouseLeave.bind(this));
      
      // Touch events
      container.addEventListener('touchstart', this.onTouchStart.bind(this));
      container.addEventListener('touchmove', this.onTouchMove.bind(this));
      container.addEventListener('touchend', this.onTouchEnd.bind(this));
      
      // Resize handling
      window.addEventListener('resize', this.onWindowResize.bind(this));
      
      if (window.ResizeObserver) {
        const resizeObserver = new ResizeObserver((entries) => {
          for (const entry of entries) {
            if (entry.target.id === 'globe-canvas') {
              this.onWindowResize();
            }
          }
        });
        resizeObserver.observe(container);
      }
    }
    
    onMouseDown(event) {
      this.startDragging(event.clientX, event.clientY);
      document.getElementById('globe-canvas').style.cursor = 'grabbing';
    }
    
    onMouseMove(event) {
      if (this.isDragging) {
        this.updateRotation(event.clientX, event.clientY);
      }
    }
    
    onMouseUp() {
      this.stopDragging();
      document.getElementById('globe-canvas').style.cursor = 'grab';
    }
    
    onMouseLeave() {
      this.stopDragging();
      document.getElementById('globe-canvas').style.cursor = 'grab';
    }
    
    onTouchStart(event) {
      event.preventDefault();
      if (event.touches.length === 1) {
        const touch = event.touches[0];
        this.startDragging(touch.clientX, touch.clientY);
      }
    }
    
    onTouchMove(event) {
      event.preventDefault();
      if (this.isDragging && event.touches.length === 1) {
        const touch = event.touches[0];
        this.updateRotation(touch.clientX, touch.clientY);
      }
    }
    
    onTouchEnd(event) {
      event.preventDefault();
      this.stopDragging();
    }
    
    startDragging(clientX, clientY) {
      this.isDragging = true;
      const container = document.getElementById('globe-canvas');
      const rect = container.getBoundingClientRect();
      this.previousMousePosition = {
        x: clientX - rect.left,
        y: clientY - rect.top
      };
    }
    
    updateRotation(clientX, clientY) {
      const container = document.getElementById('globe-canvas');
      const rect = container.getBoundingClientRect();
      const currentMousePosition = {
        x: clientX - rect.left,
        y: clientY - rect.top
      };
      
      const deltaX = currentMousePosition.x - this.previousMousePosition.x;
      
      // Only allow Y-axis rotation (horizontal dragging) - locked like Earth's rotation
      this.rotationVelocity.x = 0;
      this.rotationVelocity.y = deltaX * this.rotationSpeed;
      
      this.previousMousePosition = currentMousePosition;
    }
    
    stopDragging() {
      this.isDragging = false;
    }
    
    onWindowResize() {
      const container = document.getElementById('globe-canvas');
      if (!container || !this.renderer || !this.camera) return;
      
      const width = container.offsetWidth || container.clientWidth;
      const height = container.offsetHeight || container.clientHeight;
      
      this.camera.aspect = width / height;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(width, height);
    }
    
    animate() {
      requestAnimationFrame(this.animate.bind(this));
      
      if (this.globeMesh) {
        if (this.isDragging) {
          // Direct rotation while dragging
          this.globeMesh.rotation.y += this.rotationVelocity.y;
        } else {
          // Apply friction to momentum
          this.rotationVelocity.y *= this.friction;
          
          // Continue momentum or return to auto-rotation
          if (Math.abs(this.rotationVelocity.y) > 0.001) {
            this.globeMesh.rotation.y += this.rotationVelocity.y;
          } else {
            // Return to slow auto-rotation when momentum stops
            this.rotationVelocity.y = 0;
            this.globeMesh.rotation.y += this.autoRotationSpeed;
          }
        }
        
        // Keep the slight tilt (locked X-axis)
        this.globeMesh.rotation.x = 0.1;
      }
      
      this.renderer.render(this.scene, this.camera);
    }
  }

  // Initialize globe when component loads with dynamic import
  let atlasGlobe = null;
  
  async function loadThreeJS() {
    try {
      const threeModule = await import('three');
      THREE = threeModule;
      return true;
    } catch (error) {
      console.error('Failed to load Three.js:', error);
      return false;
    }
  }
  
  document.addEventListener('DOMContentLoaded', async () => {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    if (prefersReducedMotion) {
      // Show static globe for users who prefer reduced motion
      const container = document.getElementById('globe-canvas');
      if (container) {
        container.innerHTML = '<div style="width:100%;height:100%;display:flex;align-items:center;justify-content:center;color:#d4af37;font-size:8rem;">üåç</div>';
      }
      return;
    }
    
    // Load Three.js dynamically
    const threeLoaded = await loadThreeJS();
    
    if (!threeLoaded) {
      // Fallback to static globe emoji
      const container = document.getElementById('globe-canvas');
      if (container) {
        container.innerHTML = '<div style="width:100%;height:100%;display:flex;align-items:center;justify-content:center;color:#d4af37;font-size:8rem;">üåç</div>';
      }
      return;
    }
    
    // Small delay to ensure container is ready
    setTimeout(async () => {
      try {
        atlasGlobe = new AtlasGlobe();
        console.log('Enhanced Atlas Globe initialized successfully');
      } catch (error) {
        console.error('Atlas Globe initialization failed:', error);
        // Show error state
        const loadingElement = document.getElementById('globe-loading');
        if (loadingElement) {
          loadingElement.innerHTML = `
            <div class="globe-error">
              <div class="error-icon">üåç</div>
              <p>Globe unavailable</p>
            </div>
          `;
        }
      }
    }, 100);
  });
</script>

<style>
  .globe-container {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
  }

  #globe-canvas {
    width: min(400px, 90vw);
    height: min(400px, 90vw);
    max-width: 400px;
    max-height: 400px;
    position: relative;
    animation: float 6s ease-in-out infinite;
    filter: drop-shadow(0 0 30px rgba(212, 175, 55, 0.3));
    transition: transform 0.3s ease;
  }

  #globe-canvas:hover {
    transform: scale(1.05);
  }

  #globe-canvas :global(canvas) {
    border-radius: 50%;
  }

  .globe-loading,
  .globe-error {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: var(--color-accent-gold);
    transition: opacity 0.3s ease;
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(212, 175, 55, 0.3);
    border-top: 3px solid var(--color-accent-gold);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  .globe-loading p,
  .globe-error p {
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    margin: 0;
  }

  .error-icon {
    font-size: 3rem;
    margin-bottom: 0.5rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-20px);
    }
  }

  /* Screen reader only content */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    #globe-canvas {
      animation: none;
    }
    
    .loading-spinner {
      animation: none;
      border: 3px solid var(--color-accent-gold);
    }
    
    #globe-canvas:hover {
      transform: none;
    }
  }

  @media (max-width: 768px) {
    #globe-canvas {
      width: min(300px, 80vw);
      height: min(300px, 80vw);
    }
    
    #globe-canvas:hover {
      transform: scale(1.02); /* Less aggressive scaling on mobile */
    }
  }

  @media (max-width: 480px) {
    #globe-canvas {
      width: min(250px, 75vw);
      height: min(250px, 75vw);
    }
  }
</style>